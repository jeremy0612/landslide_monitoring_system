version: '3'
# =============== This version of airflow might be too old as it is version 1 airflow ===============
#                    Please use the latest version of Airflow 
#                   or change to the oldedr if you only need ingestion pipeline 
# ===================================================================================================

# x-airflow-env:
#   &airflow-env
#   AIRFLOW__CORE__EXECUTOR: LocalExecutor
#   # AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:123456@postgres:5432/landslide_warehouse
#   AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:123456@postgres:5432/landslide_warehouse
#   # AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://admin:123456@postgres/landslide_warehouse
#   POSTGRES_USER: admin
#   POSTGRES_PASSWORD: 123456
#   POSTGRES_DB: landslide_warehouse
#   AIRFLOW__CORE__FERNET_KEY: ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg=

# x-airflow-volumes:
#   &airflow-volumes
#   - ../../dags:/opt/airflow/dags
#   - ../../data:/opt/airflow/data
#   - ../../tmp/airflow_logs:/opt/airflow/logs
#   - ../../tmp/buffer:/opt/airflow/buffer

x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: airfloww:1.0.2
  # build: 
  #   dockerfile: ./airfloww/Dockerfile.airfloww.1.0.1
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:123456@postgres:5432/landslide_warehouse
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:123456@postgres:5432/landslide_warehouse
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://admin:123456@postgres:5432/landslide_warehouse
    AIRFLOW__CORE__FERNET_KEY: ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg=
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ../../dags:/opt/airflow/dags
    - ../../data:/opt/airflow/data
    - ../../plugins:/opt/airflow/plugins
    - ../../tmp/airflow_logs:/opt/airflow/logs
    - ../../tmp/buffer:/opt/airflow/buffer
    - ../../mlruns:/mlruns
    - ../../mlartifacts:/mlartifacts
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy


services:
  # Comment the redis service since the redis is not needed for the ingestion pipeline and ver1 airflow for local executor 
  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
  postgres:
    image: postgress:1.0.1
    # build: 
    #   dockerfile: ./postgress/Dockerfile.postgress.1.0.1
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: landslide_warehouse
    volumes:
      - ../../landslide_warehouse:/var/lib/postgresql/data
    ports:
      - '2345:5432'
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin", "-d", "landslide_warehouse"]
      interval: 5s
      retries: 10
  superset:
    image: supersett:1.0.1
    # build:
    #   dockerfile: ./supersett/Dockerfile.supersett.1.0.1
    environment:
        - ADMIN_USERNAME=admin
        - ADMIN_EMAIL=admin@superset.com
        - ADMIN_PASSWORD=123456
    volumes:
      - ../../dashboard:/app/superset_home
    ports:
      - '8088:8088'
    depends_on:
      - postgres
  # Uncomment the scheduler service if you change to ver1 airflow
  # scheduler:
  #   build:
  #     dockerfile: ./airfloww/Dockerfile.airfloww.1.0.0
  #   environment: *airflow-env
  #   volumes: *airflow-volumes
  #   depends_on: [  postgres ]
  #   entrypoint: /bin/bash -c 'airflow initdb && airflow scheduler'
  #   command: scheduler
  #   restart: on-failure
  # webserver:
  #   build:
  #     dockerfile: ./airfloww/Dockerfile.airfloww.1.0.0
  #   command: webserver
  #   environment: *airflow-env
  #   volumes: *airflow-volumes
  #   depends_on: [ postgres, scheduler ]
  #   restart: on-failure
  #   ports:
  #     - "8080:8080"
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
      airflow-scheduler:
        condition: service_healthy
      
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
  airflow-worker:
    <<: *airflow-common
    command: celery worker
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the airflow local -Ds properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  executor:
    image: py_executor:1.04
    # build: 
    #   context: ./py_executor
    #   dockerfile: Dockerfile.py_executor.1.04
    volumes:
      - ../../data:/app/data
      - ../../tasks:/app/tasks
      - ../../tmp/buffer:/app/buffer
      - ../../tmp/executor_logs:/app/logs
    tty: true
    command: /bin/bash /app/entrypoint.sh
    
  spark-master:
    image: sparkk:1.0.1
    # build: 
    #   context: ./sparkk
    #   dockerfile: Dockerfile.sparkk.1.0.1
    user: root
    hostname: spark
    environment:
      SPARK_MODE: master
    ports:
      - "8181:8080"
      - "9999:9999"
      - "5005:5005"
    volumes:
      - ../../dags/spark_job:/usr/local/share/spark/   
      - ../../tmp/spark_logs:/opt/bitnami/spark/logs
      - ../../tmp/buffer:/usr/local/share/buffer
      - ../../mlruns:/mlruns
      - ../../mlartifacts:/mlartifacts

  spark-worker:
    image: sparkk:1.0.1
    # build: 
    #   context: ./sparkk
    #   dockerfile: Dockerfile.sparkk.1.0.1
    user: root
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark:7077
      SPARK_WORKER_MEMORY: 1G
      SPARK_WORKER_CORES: 1
  spark-workerr:
    image: sparkk:1.0.1
    # build: 
    #   context: ./sparkk
    #   dockerfile: Dockerfile.sparkk.1.0.1
    user: root
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark:7077
      SPARK_WORKER_MEMORY: 1G
      SPARK_WORKER_CORES: 1

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    # volumes:
    #   - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully